#!/usr/bin/python3

import yaml
import jinja2
import jenkins
import datetime

from smtplib import SMTP
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# function definitions
def percent(part, whole):
	return round(100 * float(part)/float(whole), 1)

def get_osp_version(job_name):
	x = len(config['job_search_field']) + 1
	y = len(config['job_search_field']) + 3
	return job_name[x:y]

# initialize jinja2 vars
loader = jinja2.FileSystemLoader('./template.html')
env = jinja2.Environment(loader=loader)
template = env.get_template('')

# load configuration data
try:
	with open("config.yaml", 'r') as file:
		config = yaml.safe_load(file)
except Exception as e:
	print("Error loading configuration data: ", e)
	sys.exit()

# connect to jenkins server
try:
	server = jenkins.Jenkins(config['jenkins_url'], username=config['username'], password=config['api_token'])
	user = server.get_whoami()
	version = server.get_version()
except Exception as e:
	print("Error loading configuration data: ", e)
	sys.exit()
else:
	user_email_address = user['property'][-1]['address']
	header = "Report generated by {} from Jenkins {} on {}".format(user_email_address, version, datetime.datetime.now())

# fetch relevant jobs from server
jobs = server.get_jobs()
jobs = [job for job in jobs if config['job_search_field'] in job['name']]

# initialize python variables
num_jobs = len(jobs)
num_success = 0
num_unstable = 0
num_failure = 0
num_error = 0
rows = []

# collect info from all relevant jobs
for job in jobs[::-1]:
	job_name = job['name']
	osp_version = get_osp_version(job_name)
	try:
		job_info = server.get_job_info(job_name)
		job_url = job_info['url']
		lcb_num = job_info['lastCompletedBuild']['number']
		lcb_url = job_info['lastCompletedBuild']['url']
		build_info = server.get_build_info(job_name, lcb_num)
		lcb_result = build_info['result']
		if lcb_result == "SUCCESS":
			num_success += 1
		elif lcb_result == "UNSTABLE":
			num_unstable += 1
		elif lcb_result == "FAILURE":
			num_failure += 1
		else:
			num_error += 1	
		row = {'osp_version': osp_version, 'job_name': job_name, 'job_url': job_url, 'lcb_num': lcb_num, 'lcb_url': lcb_url, 'lcb_result': lcb_result}
		rows.append(row)
	except Exception as e:
		print("Jenkins API call error: ", e)
		continue

total_success = "Total SUCCESS:  {}/{} = {}%".format(num_success, num_jobs, percent(num_success, num_jobs))
total_unstable = "Total UNSTABLE: {}/{} = {}%".format(num_unstable, num_jobs, percent(num_unstable, num_jobs))
total_failure = "Total FAILURE:  {}/{} = {}%".format(num_failure, num_jobs, percent(num_failure, num_jobs))
if num_error > 0:
	total_error = "Total ERROR:  {}/{} = {}%".format(num_failure, num_jobs, percent(num_error, num_jobs))
else:
	total_error = False

# generate HTML report
htmlcode = template.render(header=header, rows=rows, total_success=total_success, total_unstable=total_unstable, total_failure=total_failure, total_error=total_error)

# construct email
msg = MIMEMultipart()
msg['From'] = user_email_address
msg['Subject'] = config['email_subject']
msg['To'] = config['email_to']
msg.attach(MIMEText(htmlcode, 'html'))

# create SMTP session
with SMTP(config['smtp_host']) as smtp:

	# start TLS for security
	smtp.starttls()

	# use ehlo or helo if needed
	smtp.ehlo_or_helo_if_needed()

	# send email
	smtp.sendmail(msg["From"], msg["To"], msg.as_string())
